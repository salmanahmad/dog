
Ensure the proper ASTs

Handle TODO

How are defined_variables handled? are they mapped (like functions) as well? 

Right now we have static linked libraries (with import). We may want to introduce a capability to dynamically link as well... maybe?



Create the Dog commandline utility

How does import actually work?
	- Code is indexed by absolute file name...

How do tasks and messages work?
	- DEFINE event foo {  }
	- These do add stuff to the symbol table
	- DEFINE variable = 5 does not expose a symbol - just exports the variables to other scopes...

Organize the symbol table hierarchically
	- Makes it easier to find stuff by the funciton scopes

How does the runtime actually work?






Serialize the stack

Runtime tree traversal... (updating the "program counter")

What do things like "AccessHead" return and place on the stack?

What about non-primative stack placements like people? Do we need a language wide "json" serialization architecture...



Ruby API (similar to the C api for ruby)
	Perhaps an "Init_MODULE_NAME" function that manipulates the AST (or perhaps just manipulates the function map...)

How do you "require" a C module in ruby and what woudl that look like for Dog???
	Do these do what we expect: "require 'hello'" vs "require 'hello.so'" vs "require 'hello.rb'"
	Should we have the similar approach??? 


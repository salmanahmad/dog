
Ensure the proper ASTs

Handle TODOs

Check status on http_response

dog compile and dog run
	Extensions are optional..

Error codes
	Integration with a discussion page
	Integration with stack overflow
	Integration with a documentation URL

Abreviate file paths to relative paths in error message

Configuration file should be called:
	project.config
	
	Dog init will add in project.config
	
	Also consider including a read only CONFIG command to give access from within Dog
	

Line numbers should be formatted as:
	"In line {number} of {file}" rather than "file:number"

Right now we have static linked libraries (with import). We may want to introduce a capability to dynamically link as well... maybe?

Right now import will always import files relative to the current file. In this way it acts much like require_relative in ruby instead of plain require. We may want a way to add a non-relative import that uses a LOAD_PATH to use shared libraries in a common system location.

Organize the symbol table hierarchically
	- Makes it easier to find stuff by the funciton scopes
	- Maybe something like this will work:
		symbols: {
			"foo": {
				"@path": [1,2,3]
				"bar": {
					"@path": [1,2,3,4]
				}
			}
		}



Improve the space efficiency of the bite code generation




Serialize the stack

Runtime tree traversal... (updating the "program counter")

What do things like "AccessHead" return and place on the stack?

What about non-primative stack placements like people? Do we need a language wide "json" serialization architecture...





ON EACH variable and LISTEN / ASK collections...

	We have two conflicting goals: search and variable scoping
	
	title
	
	ON EACH video DO
		# does 'title' refer to the global variable or the video
	END
	
	vs
	
	LISTEN FOR videos
	
	videos[title == "hello"]
	
	videos[video.title == "hello"]
	
	vs
	
	@each:videos[video.title == "Hello"]
	
	






Ruby API (similar to the C api for ruby)
	Perhaps an "Init_MODULE_NAME" function that manipulates the AST (or perhaps just manipulates the function map...)

How do you "require" a C module in ruby and what woudl that look like for Dog???
	Do these do what we expect: "require 'hello'" vs "require 'hello.so'" vs "require 'hello.rb'"
	Should we have the similar approach??? 







functional languages
	Everything in the language is immutable
	
	Objects / Methods exist from a syntax standpoint
	
	Manipulating an object create a new version thus preserving immutability
	
	You can hold references to the same object but it is your "view" of the object
	
		You cannot "synchronize" an object down its timeline...
		
		It may not make a lot of sense for an object to store a value that does not compose it
		
	There is no "canonical" view of an object - just "your" view of the object
	
		You can however, check for identity and equality. Objects can:
		
			equal and identical
		
			equal but not identical
		
			not equal and not identical
		
			identical but not equal (aka different versions of the same thing)
		
	In Dog, we have a problem of wanting the public to see the "up to date" version of a resource --- but there i not way to merge different views.
	
		Perhaps we model the outside world as an actor that does have a "view" and that view is constructed by the event stream
	




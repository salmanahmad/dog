#
# Copyright 2011 by Salman Ahmad (salman@salmanahmad.com).
# All rights reserved.
#
# Permission is granted for use, copying, modification, distribution,
# and distribution of modified versions of this work as long as the
# above copyright notice is included.
#

module Dog

grammar Dog

  # ================
  # = Core Program =
  # ================

  rule program
    statements
    / 
    ''
  end
  
  rule statements
    statement+ {
      def compile
        nodes = ::Dog::Nodes::Nodes.new
        nodes.nodes = []
        
        if elements then
          for element in elements do
            element = element.compile
            nodes.nodes << element if element
          end
        end
        
        return nodes
      end  
    }
  end
  
  # TODO - Perhaps add assignments to expressions. In ruby you can 
  # technically do stuff like this: j = (i = 5) and j = i = 5
  # Also, by combining them, we can add inline conditionals like:
  # i = 5 if true and i = 5 unless true. Right now, we can only attach
  # inline conditionals to statements, not expressions which means we can
  # only have one per "line"
  
  rule statement
    s? expression s? t {
      def compile
        return self.expression.compile
      end
    }
    /
    s t
    / 
    "\n"
    /
    ";"
    /
    comment
  end
  
  
  
  # ===============
  # = Expressions =
  # ===============
  
  rule expression
    assignment_expression
  end
  
  rule expression_no_assignment
    or_expression
  end
  
  rule assignment_expression
    assignment
    /
    or_expression
  end
  
  rule or_expression
    and_expression s or_operator s or_expression {
      def compile
        node = ::Dog::Nodes::OperatorInfixCall.new
        node.arg1 = and_expression.compile
        node.operator = or_operator.compile
        node.arg2 = or_expression.compile
        
        return node
      end
    }
    /
    and_expression
  end
  
  rule and_expression
    relational_expression s and_operator s and_expression {
      def compile
        node = ::Dog::Nodes::OperatorInfixCall.new
        node.arg1 = relational_expression.compile
        node.operator = and_operator.compile
        node.arg2 = and_expression.compile
        
        return node
      end
    }
    /
    relational_expression
  end
  
  rule relational_expression
    additive_expression s? relational_operator s? relational_expression {
      def compile
        node = ::Dog::Nodes::OperatorInfixCall.new
        node.arg1 = additive_expression.compile
        node.operator = relational_operator.compile
        node.arg2 = relational_expression.compile
        
        return node
      end
    }
    /
    additive_expression
  end
  
  rule additive_expression
    multiplicative_expression s? additive_operator s? additive_expression {
      def compile
        node = ::Dog::Nodes::OperatorInfixCall.new
        node.arg1 = multiplicative_expression.compile
        node.operator = additive_operator.compile
        node.arg2 = additive_expression.compile
        
        return node
      end
    }
    /
    multiplicative_expression
  end
  
  rule multiplicative_expression
    unary_expression s? multiplicative_operator s? multiplicative_expression {
      def compile
        node = ::Dog::Nodes::OperatorInfixCall.new
        node.arg1 = unary_expression.compile
        node.operator = multiplicative_operator.compile
        node.arg2 = multiplicative_expression.compile
        
        return node
      end
    }
    /
    unary_expression
  end
  
  rule unary_expression
    unary_operator s unary_expression {
      def compile
        node = ::Dog::Nodes::OperatorPrefixCall.new
        node.operator = unary_operator.compile
        node.arg = unary_expression.compile
        
        return node
      end
    }
    /
    primary_expression
  end
  
  rule primary_expression
    access
    /
    compute
    /
    ask
    /
    listen
    /
    notify
    /
    function_definition
    /
    structure_definition
    /
    collection_definition
    /
    community_definition
    /
    control_structure
    /
    import
    /
    print
    /
    inspect
    /
    on
    /
    user
  end
  
  # TODO - Remove this. I am keeping it around for documentaiton purposes
  # Mostly I am keep it around so that I can remember:
  #    reply
  #    config
  #
  
  
  # ==============
  # = Assignment =
  # ==============
  
  rule assignment
    assignment_access s? assignment_operator s? expression {
      def compile
        node = ::Dog::Nodes::Assignment.new
        node.expression = expression.compile
        node.sequence = assignment_access.compile
        return node
      end
    }
  end
  
  rule assignment_access
    identifier access_tail:(access_tail)? {
      def compile
        if !access_tail.empty? then
          return access_tail.compile.clone.unshift(identifier.text_value)
        else
          return [identifier.text_value]
        end
      end
    }
  end
  
  rule access
    access_head access_tail:(access_tail)? {
      def compile
        node = ::Dog::Nodes::Access.new
        
        if !access_tail.empty? then
          node.sequence = access_tail.compile.clone.unshift(access_head.compile)
        else
          node.sequence = [access_head.compile]
        end
        
        return node
      end
    }
  end
  
  rule access_head
    literal
    /
    identifier {
      def compile
        return self.text_value
      end
    }
    / 
    '(' sn? expression sn? ')' {
      def compile
        return expression.compile
      end
    }
  end
  
  rule access_tail
    access_dot
    / 
    access_bracket
  end
  
  rule access_dot
    '.' identifier access_tail:(access_tail)? {
      def compile
        if !access_tail.empty? then
          return access_tail.compile.clone.unshift(identifier.text_value)
        else
          return [identifier.text_value]
        end
      end
    }
  end
  
  rule access_bracket
    '[' s? expression s? ']' access_tail:(access_tail)? {
      def compile
        if !access_tail.empty? then
          return access_tail.compile.clone.unshift(expression.compile)
        else
          return [expression.compile]
        end
      end
    }
  end
  
  
  
  # =============
  # = Operators =
  # =============
  
  rule assignment_operator
    '=' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule relational_operator
    equality_operator
    / 
    inequality_operator
    / 
    greater_than_equal_operator
    / 
    less_than_equal_operator
    / 
    greater_than_operator
    / 
    less_than_operator
  end
  
  rule additive_operator
    addition_operator 
    / 
    subtraction_operator
  end
  
  rule multiplicative_operator
    multiplication_operator 
    / 
    division_operator
  end
  
  rule unary_operator
    not_operator
  end
  
  rule addition_operator
    '+' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule subtraction_operator
    '-' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule multiplication_operator
    '*' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule division_operator
    '/' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule equality_operator
    '==' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule inequality_operator
    '!=' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule greater_than_operator
    '>' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule less_than_operator
    '<' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule greater_than_equal_operator
    '>=' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule less_than_equal_operator
    '<=' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule and_operator
    'AND' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule or_operator
    'OR' {
      def compile
        return self.text_value
      end
    }
  end
  
  rule not_operator
    'NOT' {
      def compile
        return self.text_value
      end
    }
  end
  
  
  
  # ===================
  # = Compute Command =
  # ===================
  
  rule compute
    'COMPUTE' s identifier on_clause:(on_clause)? using_clause:(using_clause)? {
      def compile
        node = ::Dog::Nodes::FunctionCall.new
        
        node.function_name = identifier.text_value
        
        unless on_clause.empty? then
          node.mandatory_arguments = on_clause.compile
        end
        
        unless using_clause.empty? then
          node.optional_arguments = using_clause.compile
        end
        
        return node
      end
    }
  end
  
  
  
  # ===============
  # = Ask Command =
  # ===============
  
  rule ask
    'ASK' sn ask_count? expression via_clause ask_to_clause on_clause:(on_clause)? using_clause:(using_clause)? {
      def compile
        node = ::Dog::Nodes::FunctionAsyncCall.new
        
        node.target = expression.compile
        node.function_name = ask_to_clause.compile
        node.mandatory_arguments = on_clause.compile unless on_clause.empty?
        node.optional_arguments = using_clause.compile unless using_clause.empty?
        node.via = via_clause.compile
        
        return node
      end
    }
  end
  
  # TODO - Actually use this information
  rule ask_count
    integer sn {
      def compile
        return integer.text_value.to_f
      end
    }
  end
  
  # TODO - Bring back - also for compute
  #s 'TO' s (string / access)
  rule ask_to_clause
    s 'TO' s identifier {
      def compile
        return identifier.text_value
      end
    }
  end
  
  
  
  # ==================
  # = Listen Command = 
  # ==================
  
  rule listen
    'LISTEN' listen_to_clause via_clause listen_for_clause {
      def compile
        node = ::Dog::Nodes::Listen.new
        
        for_clause = listen_for_clause.compile
        
        node.target = listen_to_clause.compile
        node.variable = for_clause.first
        node.variable_type = for_clause.last
        node.via = via_clause.compile
        
        return node
      end
    }
  end

  rule listen_to_clause
    s 'TO' s expression {
      def compile
        return expression.compile
      end
    }
  end
  
  rule listen_for_clause
    s 'FOR' s identifier listen_of_clause:(listen_of_clause)? {
      def compile
        if !listen_of_clause.empty?
          return [identifier.text_value, listen_of_clause.compile]
        else
          return [identifier.text_value, nil]
        end
      end
    }
  end
  
  rule listen_of_clause
    s 'OF' s expression {
      def compile
        return expression.compile
      end
    }
  end
  
  
  
  # ==========
  # = Notify =
  # ==========
  
  rule notify
    'NOTIFY' s expression via_clause notify_of_clause {
      def method_name
        node = ::Dog::Nodes::Notify.new
        
        node.target = expression.compile
        node.message = notify_of_clause.compile
        node.via = via_clause.compile
        
        return node
      end
    }
  end

  rule notify_of_clause
    s 'OF' s expression {
      def compile
        return expression.compile
      end
    }
  end
  
  
  
  
  # ==================
  # = People Command =
  # ==================
  
  rule user
    me / public / people / person
  end
  
  rule me
    'ME'
  end
  
  rule public
    'PUBLIC'
  end
  
  rule person
    'PERSON' people_from_clause? (people_where_clause)?
  end
  
  rule people
    'PEOPLE' people_from_clause? (people_where_clause)?
  end
  
  # TODO - Add back community list. Right now, you can only access people from 
  # one community at a time...
  rule people_from_clause
    sn 'FROM' sn access
  end

  rule people_where_clause
    sn 'WHERE' sn predicate
  end
  
  rule predicate
    predicate_unary / predicate_binary / predicate_primary
  end 
  
  rule predicate_unary
    not_operator s? '(' s? predicate_primary s? ')'
  end
  
  rule predicate_binary
    predicate_primary s (and_operator / or_operator) s predicate
  end
  
  rule predicate_primary 
    predicate_parenthesis / predicate_conditional
  end 
  
  rule predicate_parenthesis 
    '(' s? predicate s? ')'
  end
  
  rule predicate_conditional
    key_paths s? relational_operator s? access
  end
  
  
  
  
  
  # ==============
  # = On Command =
  # ==============
  
  rule on
    'ON' on_each? in_clause 'DO' sn statements? s? 'END'
  end
  
  rule on_each
    s 'EACH' on_each_count?
  end
  
  rule on_each_count
    s integer
  end
  
  
  
  
  # ===============
  # = Definitions =
  # ===============
  
  rule function_definition
    'DEFINE' s identifier function_for? function_on? function_using? s 'DO' sn statements? s? 'END'
  end
  
  rule function_for
    s 'FOR' s identifier
  end
  
  rule function_on
    s 'ON' s identifier_list
  end
  
  rule function_using
    s 'USING' s function_optional_parameters
  end
  
  rule function_optional_parameters
    function_optional_parameter+
  end
  
  rule function_optional_parameter
    s? identifier s? '=' s? expression (s? ',' &function_optional_parameter / '' !function_optional_parameter)
  end
  
  rule structure_definition
    'DEFINE' s identifier sn? '{' sn? structure_property* sn? '}'
  end
  
  rule structure_property
    sn? (identifier s)? (identifier / string / number) (s? '=' s? expression)? s? ((',' / "\n") &structure_property / '' !structure_property)
  end
  
  rule collection_definition
    'DEFINE' s identifier s 'OF' identifier
  end
  
  rule community_definition
    'DEFINE' s 'COMMUNITY' s identifier sn? '{' sn? structure_property* sn? '}'
  end
  
  
  
  
  # ===================
  # = Others Commands =
  # ===================
  
  # TODO
  rule import
    'IMPORT'
  end
  
  rule print
    'PRINT' space expression {
      def compile
        node = ::Dog::Nodes::Print.new
        node.expression = expression.compile
        return node
      end      
    }
  end
  
  rule inspect
    'INSPECT' space expression {
      def compile
        node = ::Dog::Nodes::Inspect.new
        node.expression = expression.compile
        return node
      end
    }
  end
  
  
  
  # ======================
  # = Control Structures =
  # ======================
  
  rule control_structure
    if / for / while / break / return
  end
  
  rule if
    'IF' s expression s 'THEN' sn statements:(statements)? else_if_clause:(else_if_clause)* else_clause:(else_clause)? s? 'END' {
      def compile
        node = ::Dog::Nodes::If.new
        node.conditions = []
        
        if !statements.empty? then
          node.conditions << [expression.compile, statements.compile]
        else
          node.conditions << [expression.compile, nil]
        end
        
        for clause in else_if_clause.elements
          node.conditions << clause.compile
        end
        
        if !else_clause.empty? then
          node.conditions << else_clause.compile
        end
        
        return node
      end
    }
  end
  
  rule else_if_clause
    sn? 'ELSE' s 'IF' s expression s 'THEN' sn statements:(statements)? {
      def compile
        if !statements.empty? then
          return [expression.compile, statements.compile]          
        else
          return [expression.compile, nil]
        end
      end
    } 
  end
  
  rule else_clause
    sn? 'ELSE' sn statements:(statements)? {
      def compile
        if !statements.empty? then
          return [nil, statements.compile]
        else
          return [nil, nil]
        end
      end
    }
  end

  rule for
    'FOR' s 'EACH' in_clause 'DO' sn statements:(statements)? s? 'END' {
      def compile
        node = ::Dog::Nodes::For.new
        
        clause = in_clause.compile
        
        node.variable = clause.first
        node.collection = clause.last
        
        if !statements.empty? then
          node.statements = statements.compile
        end
        
        return node
      end
    }
  end
  
  rule while
    'WHILE' s expression s 'DO' sn statements:(statements)? s? 'END' {
      def compile
        node = ::Dog::Nodes::While.new
        node.condition = expression.compile
        
        if !statements.empty? then
          node.statements = statements.compile  
        end
        
        return node
      end
    }
  end
  
  rule break
    'BREAK' {
      def compile
        return ::Dog::Nodes::Break.new
      end
    }
  end
  
  rule return
    'RETURN' expression:(s expression)? {
      def compile
        node = ::Dog::Nodes::Return.new
        
        if !expression.empty? then
          node.expression = self.expression.expression.compile
        end
        
        return node
      end
    }
  end
  
  
  
  
  # ==================
  # = Shared Clauses =
  # ==================
  
  rule using_clause
    s 'USING' s first:(identifier s? '=' s? expression) rest:(s? ',' s? identifier s? '=' s? expression)* {
      def compile
        args = {}
        
        args[first.identifier.text_value] = first.expression.compile
        
        for r in rest.elements do
          args[r.identifier.text_value] = r.expression.compile
        end
        
        return args
      end
    }
  end
  
  rule on_clause
  s 'ON' s first:expression rest:(s? ',' s? expression)* {
    def compile
      args = []
      
      args << first.compile
      
      for r in rest.elements do
        args << r.expression.compile
      end
      
      return args
    end
  }
  /
  s 'ON' s first:(identifier s? '=' s? expression) rest:(s? ',' s? identifier s? '=' s? expression)* {
    def compile
      args = {}
      
      args[first.identifier.text_value] = first.expression.compile
      
      for r in rest.elements do
        args[r.identifier.text_value] = r.expression.compile
      end
      
      return args
    end
  }
  end
  
  rule via_clause 
    s 'VIA' s identifier {
      def compile
        return identifier.text_value
      end
    }
  end
  
  rule in_clause
    s identifier in_clause_expression:(s 'IN' s expression)? s {
      def compile
        if !in_clause_expression.empty? then
          return [identifier.text_value, in_clause_expression.expression.compile]
        else
          return [identifier.text_value, nil]
        end
      end
    }
  end
  
  
  
  # =========
  # = Lists =
  # =========
  
  rule key_paths
    key_path+
  end
  
  rule key_path
    identifier ('.' &key_path / '' !key_path)
  end
  
  rule identifier_list
    identifier_list_item+
  end
  
  rule identifier_list_item
    s? identifier (s? ',' &identifier_list_item / '' !identifier_list_item)
  end
  
  
  
  # ================
  # = Dog literals =
  # ================
  
  rule literal
    number / string / bool / null / structure
  end
  
  # TODO - I am keep this for the future if I choose to include this syntactic sugar
  #rule array 
  #  '[' sn? items? sn? (',' sn?)? ']' <::Dog::Nodes::ArrayLiteral>
  #end
  #
  #rule items
  #  item+ <::Dog::Nodes::ArrayItems>
  #end
  #
  #rule item
  #  sn? expression ((sn? ',' &item) / ('' !item)) <::Dog::Nodes::ArrayItem>
  #end
  
  rule structure
    # TODO - Make this identifier a package identifier
    type:(identifier sn?)? '{' sn? associations:(first:association rest:(((sn? "," sn?)+ / "\n")  association)* )? (sn? ','* sn?) '}' {
      def compile
        literal = ::Dog::Nodes::StructureLiteral.new
        literal.value = []
        
        if !type.empty? then
          literal.type = self.type.identifier.text_value
        end
        
        if !associations.empty? then
          literal.value << self.associations.first.compile
          
          if self.associations.rest then
            for a in self.associations.rest.elements do
              literal.value << a.association.compile
            end
          end
        end
        
        return literal
      end
    }
    #'{' s? association*  s? '}'
  end

  rule association
    sn? association_key s? '=' s? expression s? {
      def compile
        return [association_key.compile, expression.compile]
      end
    }
    #sn? (identifier / string / number) s? '=' s? expression s? ( "," &association / '' !association)
  end
  
  # TODO - Consider making the the key an expression instead of identifier / string / number
  rule association_key
    identifier {
      def compile
        return self.text_value
      end
    }
    / 
    string {
      def compile
        return Shellwords::shellwords(self.text_value).first
      end
    }
    / 
    number {
      def compile
        return self.text_value.to_f
      end
    }
  end
  
  rule string
    (
    '"' ('\"' / !'"' .)* '"'
    /
    '\'' ('\\\'' / !'\'' .)* '\''
    ) {
      def compile
        literal = ::Dog::Nodes::StringLiteral.new
        literal.value = Shellwords::shellwords(self.text_value).first
        return literal
      end
    }
  end
  
  rule number
    float / integer
  end
  
  rule integer 
    ('-' s?)? digit+ {
    def compile
      literal = ::Dog::Nodes::NumberLiteral.new 
      literal.value = self.text_value.to_f
      return literal
    end
    }
  end
  
  rule float
    ('-' s?)? digit+ '.' digit* {
      def compile
        literal = ::Dog::Nodes::NumberLiteral.new 
        literal.value = self.text_value.to_f
        return literal
      end
    }
  end

  rule bool
    (true / false)
  end

  rule true
    ('TRUE' / 'true') {
      def compile
      return ::Dog::Nodes::TrueLiteral.new  
    end
    }
  end

  rule false
    ('FALSE' / 'false') {
    def compile
      return ::Dog::Nodes::FalseLiteral.new
    end
  }
  end
  
  rule null
    ('NULL' / 'null') {
    def compile
      return ::Dog::Nodes::NullLiteral.new
    end
  }
  end
  
  
  
  
  # ===================
  # = Building Blocks =
  # ===================
  
  rule identifier
    lower (lower / digit / '_')*
  end
  
  rule digit
    [0-9]
  end

  rule character
    lower / upper / '_'
  end

  rule lower
    [a-z]
  end

  rule upper
    [A-Z]
  end

  rule t
    terminal
  end

  rule terminal
    (";" / comment / "\n" / end_of_file)
  end

  rule comment
    '#' (!"\n" .)* ("\n" / end_of_file)
  end

  rule sn
    space_newline
  end

  rule space_newline
    (" " / "\t" / "\n" / "\r" / comment)+
  end
  
  rule s
    space
  end

  rule space
    (" " / "\t")+
  end

  rule end_of_file
    !.
  end

end

end

#
# Copyright 2011 by Salman Ahmad (salman@salmanahmad.com).
# All rights reserved.
#
# Permission is granted for use, copying, modification, distribution,
# and distribution of modified versions of this work as long as the
# above copyright notice is included.
#

module Dog

grammar Dog

  # ================
  # = Core Program =
  # ================

  rule program
    statements '' <::Dog::Nodes::Program> 
    / 
    '' <::Dog::Nodes::Program>
  end
  
  rule statements
    statement+ <::Dog::Nodes::Statements>
  end
  
  # TODO - Perhaps add assignments to expressions. In ruby you can 
  # technically do stuff like this: j = (i = 5) and j = i = 5
  # Also, by combining them, we can add inline conditionals like:
  # i = 5 if true and i = 5 unless true. Right now, we can only attach
  # inline conditionals to statements, not expressions which means we can
  # only have one per "line"
  
  rule statement
    s? (assignment / expression) s? t <::Dog::Nodes::Statement>
    /
    s t
    / 
    "\n"
    /
    ";"
    /
    comment
  end
  
  # ==============
  # = Statements =
  # ==============
  
  # TODO - I can do things like 5 = 7 right now, I need to fix that...
  # Perhaps changing access_head from literal to collection?
  
  rule assignment 
    access s? assignment_operator s? expression <::Dog::Nodes::Assignment>
  end
  
  rule expression
    command / operation / access '' <::Dog::Nodes::Expression>
  end
  
  rule command
     community / event / task / message / listen / allow / ask / notify / reply / compute / on / user / definition / control_structure / config / import / print / inspect
  end
  
  rule operation
    operation_head s? binary_operator s? (expression / operation_head) <::Dog::Nodes::Operation>
    / 
    unary_operator s? expression <::Dog::Nodes::Operation>
  end
  
  rule operation_head
    command '' <::Dog::Nodes::OperationHead>
    / 
    access '' <::Dog::Nodes::OperationHead>
  end
  
  rule access
    access_head access_tail? <::Dog::Nodes::Access>
  end
  
  rule access_head
    literal '' <::Dog::Nodes::AccessHead>
    / 
    identifier '' <::Dog::Nodes::AccessHead>
    / 
    '(' s? expression s? ')' <::Dog::Nodes::AccessHead>
  end
  
  rule access_tail
    access_dot '' <::Dog::Nodes::AccessTail>
    / 
    access_bracket '' <::Dog::Nodes::AccessTail>
  end
  
  rule access_dot
    '.' identifier access_tail? <::Dog::Nodes::AccessDot>
  end
  
  rule access_bracket
    '[' s? expression s? ']' access_tail? <::Dog::Nodes::AccessBracket>
  end
  
  rule identifier
    lower (lower / digit / '_')* <::Dog::Nodes::Identifier>
  end

  # =============
  # = Operators =
  # =============

  rule binary_operator
    arithmetic_operator / collection_operator / comparative_operator / and_operator / or_operator
  end
  
  rule unary_operator
    not_operator
  end
  
  rule assignment_operator
    '=' <::Dog::Nodes::AssignmentOperator>
  end
  
  rule arithmetic_operator
    addition_operator / subtraction_operator / multiplication_operator / division_operator
  end
  
  rule comparative_operator
    equality_operator / inequality_operator / greater_than_operator / less_than_operator / greater_than_equal_operator / less_than_equal_operator / associates_operator / contains_operator
  end
  
  rule logical_operator
    and_operator / or_operator / not_operator
  end
  
  rule collection_operator
    union_operator / intersect_operator / difference_operator / append_operator / prepend_operator
  end
  
  # TODO: Order of operations...
  
  rule addition_operator
    '+' <::Dog::Nodes::AdditionOperator>
  end
  
  rule subtraction_operator
    '-' <::Dog::Nodes::SubtractionOperator>
  end
  
  rule multiplication_operator
    '*' <::Dog::Nodes::MultiplicationOperator>
  end
  
  rule division_operator
    '/' <::Dog::Nodes::DivisionOperator>
  end
  
  rule equality_operator
    '==' <::Dog::Nodes::EqualityOperator>
  end
  
  rule inequality_operator
    '!=' <::Dog::Nodes::InequalityOperator>
  end
  
  rule greater_than_operator
    '>' <::Dog::Nodes::GreaterThanOperator>
  end
  
  rule less_than_operator
    '<' <::Dog::Nodes::LessThanOperator>
  end
  
  rule greater_than_equal_operator
    '>=' <::Dog::Nodes::GreaterThanEqualOperator>
  end
  
  rule less_than_equal_operator
    '<=' <::Dog::Nodes::LessThanEqualOperator>
  end
  
  rule and_operator
    'AND' <::Dog::Nodes::AndOperator>
  end
  
  rule or_operator
    'OR' <::Dog::Nodes::OrOperator>
  end
  
  rule not_operator
    'NOT' <::Dog::Nodes::NotOperator>
  end
  
  rule union_operator
    'UNION' <::Dog::Nodes::UnionOperator>
  end
  
  rule intersect_operator
    'INTERSECT' <::Dog::Nodes::IntersectOperator>
  end
  
  rule difference_operator
    ('DIFFERENCE' / 'DIFF' / 'MINUS') <::Dog::Nodes::DifferenceOperator>
  end
  
  rule append_operator
    'APPEND' <::Dog::Nodes::AppendOperator>
  end
  
  rule prepend_operator
    'PREPEND' <::Dog::Nodes::PrependOperator>
  end
  
  rule associates_operator
    "ASSOCIATES" <::Dog::Nodes::AssociatesOperator>
  end
  
  rule contains_operator
    "CONTAINS" <::Dog::Nodes::ContainsOperator>
  end
  
  
  # ====================
  # = Human Interfaces =
  # ====================
  
  rule structure
    community / event / task / message
  end
  
  rule community
    'DEFINE' s 'community' s identifier sn? '{' sn? community_properties? sn? '}' <::Dog::Nodes::Community>
  end
  
  rule community_properties
    community_property+ <::Dog::Nodes::CommunityProperties>
  end
  
  rule community_property
    community_property_attribute '' <::Dog::Nodes::CommunityProperty>
    /
    community_property_relationship '' <::Dog::Nodes::CommunityProperty>
  end
  
  rule community_property_attribute
    sn? identifier s? t <::Dog::Nodes::CommunityPropertyAttribute>
  end
  
  rule community_property_relationship
    sn? 'relationship' s identifier community_property_relationship_inverse? s? t <::Dog::Nodes::CommunityPropertyRelationship>
  end
  
  rule community_property_relationship_inverse
    s? ',' s? community_property_relationship_inverse_community? identifier <::Dog::Nodes::CommunityPropertyRelationshipInverse>
  end
  
  rule community_property_relationship_inverse_community
    identifier '.' <::Dog::Nodes::CommunityPropertyRelationshipInverseCommunity>
  end
  
  rule event
    'DEFINE' s 'event' s identifier sn? '{' sn? properties? sn? '}' <::Dog::Nodes::Event>
  end
  
  rule task
    'DEFINE' s 'task' s identifier sn? '{' sn? properties? sn? '}' <::Dog::Nodes::Task>
  end
  
  rule message
    'DEFINE' s 'message' s identifier sn? '{' sn? properties? sn? '}' <::Dog::Nodes::Message>
  end
  
  rule properties
    property+ <::Dog::Nodes::Properties>
  end
  
  rule property
    sn? property_requirement_modifier? property_direction_modifier? identifier property_default_value? s? t <::Dog::Nodes::Property>
  end
  
  rule property_default_value
    s? '=' s? expression <::Dog::Nodes::PropertyDefaultValue>
  end
  
  rule property_requirement_modifier
    'required' s <::Dog::Nodes::PropertyRequirementModifier>
    /
    'optional' s <::Dog::Nodes::PropertyRequirementModifier>
  end
  
  rule property_direction_modifier
    'input' s <::Dog::Nodes::PropertyDirectionModifier>
    /
    'output' s <::Dog::Nodes::PropertyDirectionModifier>
  end
  
  # ==================
  # = Listen Command = 
  # ==================

  rule listen
    'LISTEN' listen_to_clause via_clause listen_at_clause? listen_for_clause <::Dog::Nodes::Listen>
  end

  rule listen_to_clause
    s 'TO' s (user / access) <::Dog::Nodes::ListenToClause>
  end
  
  # TODO - should this be an identifier or an access -- Perhaps this goes in the OF clause???
  rule listen_for_clause
    s 'FOR' s identifier <::Dog::Nodes::ListenForClause>
  end

  rule listen_at_clause
    s 'AT' s string <::Dog::Nodes::ListenAtClause>
  end
  
  
  # =========
  # = Allow =
  # =========
  
  rule allow
    'ALLOW' s (user / access) s 'TO' s allow_modifier s (allow_profile / identifier) <::Dog::Nodes::Allow>
  end
  
  rule allow_modifier
    'JOIN' <::Dog::Nodes::AllowModifier>
    / 
    'READ' <::Dog::Nodes::AllowModifier>
    / 
    'WRITE' <::Dog::Nodes::AllowModifier>
    /
    'ACCESS' <::Dog::Nodes::AllowModifier>
  end
  
  rule allow_profile
    'PROFILE' <::Dog::Nodes::AllowProfile>
  end
  
  # ===============
  # = Ask Command =
  # ===============

  rule ask
    'ASK' sn (integer sn)? (user / access) via_clause ask_to_clause on_clause? using_clause? <::Dog::Nodes::Ask>
  end
  
  rule ask_to_clause
    s 'TO' s (string / access) <::Dog::Nodes::AskToClause>
  end

  # ==========
  # = Notify =
  # ==========
  
  # TODO - Messages will never has any mandatory arguments
  
  rule notify
    'NOTIFY' s (user / access) via_clause notify_of_clause using_clause? <::Dog::Nodes::Notify>
  end

  rule notify_of_clause
    s 'OF' s (string / access) <::Dog::Nodes::NotifyOfClause>
  end
  
  # =========
  # = Reply =
  # =========

  rule reply
    'REPLY' s 'TO' s (user / access) reply_with_clause <::Dog::Nodes::Reply>
  end
  
  rule reply_with_clause
    s 'WITH' s (identifier_associations / access) <::Dog::Nodes::ReplyWithClause>
  end
  
  # ===================
  # = Compute Command =
  # ===================

  rule compute
    'COMPUTE' s access on_clause? using_clause? <::Dog::Nodes::Compute>
  end
  
  # ==============
  # = On Command =
  # ==============
  
  rule on
    'ON' on_each? in_clause 'DO' sn statements? s? 'END' <::Dog::Nodes::On>
  end
  
  rule on_each
    s 'EACH' on_each_count? <::Dog::Nodes::OnEach>
  end
  
  rule on_each_count
    s integer <::Dog::Nodes::OnEachCount>
  end
  
  # ==================
  # = People Command =
  # ==================
  
  rule user
    me / public / people / person
  end
  
  rule me
    'ME' <::Dog::Nodes::Me>
  end
  
  rule public
    'PUBLIC' <::Dog::Nodes::Public>
  end
  
  rule person
    'PERSON' people_from_clause? (people_where_clause)? <::Dog::Nodes::Person>
  end
  
  rule people
    'PEOPLE' people_from_clause? (people_where_clause)? <::Dog::Nodes::People>
  end
  
  # TODO - Add back community list. Right now, you can only access people from 
  # one community at a time...
  rule people_from_clause
    sn 'FROM' sn access <::Dog::Nodes::PeopleFromClause>
  end

  rule people_where_clause
    sn 'WHERE' sn predicate <::Dog::Nodes::PeopleWhereClause>
  end
  
  rule predicate
    predicate_unary / predicate_binary / predicate_primary
  end 
  
  rule predicate_unary
    not_operator s? '(' s? predicate_primary s? ')' <::Dog::Nodes::PredicateUnary>
  end
  
  rule predicate_binary
    predicate_primary s (and_operator / or_operator) s predicate <::Dog::Nodes::PredicateBinary>
  end
  
  rule predicate_primary 
    predicate_parenthesis / predicate_conditional
  end 
  
  rule predicate_parenthesis 
    '(' s? predicate s? ')' <::Dog::Nodes::Predicate>
  end
  
  rule predicate_conditional
    key_paths s? comparative_operator s? access <::Dog::Nodes::PredicateConditonal>
  end
  
  
  # ===============
  # = Definitions =
  # ===============
  
  rule definition
    define_variable / define_function
  end
  
  rule define_variable
    'DEFINE' s identifier s? assignment_operator s? expression <::Dog::Nodes::DefineVariable>
  end
  
  rule define_function
    'DEFINE' s identifier function_on? function_using? s? 'DO' sn statements? s? 'END' <::Dog::Nodes::DefineFunction>
  end
  
  rule function_on
    s 'ON' s identifier_list <::Dog::Nodes::FunctionOn>
  end
  
  rule function_using
    s 'USING' s function_optional_parameters <::Dog::Nodes::FunctionUsing>
  end
  
  rule function_optional_parameters
    function_optional_parameter+ <::Dog::Nodes::FunctionOptionalParameters>
  end
  
  rule function_optional_parameter
    s? identifier s? '=' s? expression s? (',' &function_optional_parameter / '' !function_optional_parameter) <::Dog::Nodes::FunctionOptionalParameter>
  end
  
  
  # ===================
  # = Others Commands =
  # ===================
  
  rule config
    'CONFIG' s identifier s '=' s expression <::Dog::Nodes::Config>
  end
  
  rule import 
    'IMPORT' s (import_function / import_data / import_community / import_task / import_message / import_config) s string import_as? <::Dog::Nodes::Import>
  end
  
  rule import_as
    s 'AS' s identifier <::Dog::Nodes::ImportAsClause>
  end
  
  rule import_function
    'FUNCTION' <::Dog::Nodes::ImportFunction>
  end
  
  rule import_data
    'DATA' <::Dog::Nodes::ImportData>
  end
  
  rule import_community
    'COMMUNITY' <::Dog::Nodes::ImportCommunity>
  end
  
  rule import_task
    'TASK' <::Dog::Nodes::ImportTask>
  end
  
  rule import_message
    'MESSAGE' <::Dog::Nodes::ImportMessage>
  end
  
  rule import_config
    'CONFIG' <::Dog::Nodes::ImportConfig>
  end
  
  rule print
    'PRINT' space expression <::Dog::Nodes::Print>
  end
  
  rule inspect
    'INSPECT' space expression <::Dog::Nodes::Inspect>
  end
  
  
  # ======================
  # = Control Structures =
  # ======================

  rule control_structure
    if / for / repeat / break / return
  end

  rule repeat
    'REPEAT' s integer s 'DO' sn statements? s? 'END' <::Dog::Nodes::Repeat>
  end

  rule if
    'IF' s expression s 'THEN' sn statements? else_clause? s? 'END' <::Dog::Nodes::If>
  end
  
  rule else_clause
    sn? 'ELSE' sn statements? <::Dog::Nodes::ElseClause>
  end

  rule for
    'FOR' s 'EACH' in_clause 'DO' sn statements? s? ('END' / ('UNTIL' s statement)) <::Dog::Nodes::For>
  end
  
  rule break
    'BREAK' <::Dog::Nodes::Break>
  end
  
  rule return
    'RETURN' return_expression? <::Dog::Nodes::Return>
  end
  
  rule return_expression 
    s expression <::Dog::Nodes::ReturnExpression>
  end
  
  
  # ==================
  # = Shared Clauses =
  # ==================
  
  rule using_clause
    s 'USING' s (identifier_associations / access) <::Dog::Nodes::UsingClause>
  end
  
  rule on_clause 
    s ('ON' s)? (identifier_associations / argument_list) <::Dog::Nodes::OnClause>
  end

  rule via_clause 
    s 'VIA' s identifier <::Dog::Nodes::ViaClause>
  end
  
  rule in_clause
    s identifier (s 'IN' s expression)? s <::Dog::Nodes::InClause>
  end
  
  # =========
  # = Lists =
  # =========
  
  rule key_paths
    key_path+ <::Dog::Nodes::KeyPaths>
  end
  
  rule key_path
    identifier ('.' &key_path / '' !key_path) <::Dog::Nodes::KeyPath>
  end
  
  # TODO - Add newlines? -- perhaps combine with associations below?
  
  rule identifier_associations
    identifier_association+ <::Dog::Nodes::IdentifierAssociations>
  end

  rule identifier_association
    sn? identifier s? ':' s? expression (s? ',' &identifier_association / '' !identifier_association) <::Dog::Nodes::IdentifierAssociation>
  end
  
  rule identifier_list
    identifier_list_item+
  end
  
  rule identifier_list_item
    s? identifier (s? ',' &identifier_list_item / '' !identifier_list_item)
  end
  
  # TODO - combine with items -- perhaps renamed to expresion_list -- add newlines?
  
  rule argument_list
    argument_list_item+
  end
  
  # TODO - To get this to work, I had to move the 's?' into the parenthesis with
  # &argument_list_item. if I try to do that with association i get test errors.
  # is this correct? I also did the same thing with identifier_list and 
  # identifier_association will that break in the future also?
  
  rule argument_list_item
    s? expression (s? ',' &argument_list_item / '' !argument_list_item)
  end
  
  # ================
  # = Dog literals =
  # ================

  rule literal
    number / string / bool / collection
  end

  rule collection
    array / hash
  end

  rule array 
    '[' sn? items? sn? (',' sn?)? ']' <::Dog::Nodes::ArrayLiteral>
  end

  rule items
    item+ <::Dog::Nodes::ArrayItems>
  end

  rule item
    sn? expression ((sn? ',' &item) / ('' !item)) <::Dog::Nodes::ArrayItem>
  end

  rule hash 
    '{' sn? associations? (sn? ',' sn?)? '}' <::Dog::Nodes::HashLiteral>
  end

  rule associations
    association+ <::Dog::Nodes::HashAssociations>
  end

  rule association 
    sn? string s? ':' s? expression sn? (',' &association / '' !association) <::Dog::Nodes::HashAssociation>
  end

  rule string
    (
    '"' ('\"' / !'"' .)* '"' <::Dog::Nodes::StringLiteral>
    /
    '\'' ('\\\'' / !'\'' .)* '\'' <::Dog::Nodes::StringLiteral>
    )
  end

  rule number
    float / integer
  end

  rule integer 
    ('-' s?)? digit+ <::Dog::Nodes::IntegerLiteral>
  end

  rule float
    ('-' s?)? digit+ '.' digit* <::Dog::Nodes::FloatLiteral>
  end

  rule bool
    (true / false)
  end

  rule true
    (
      'TRUE' <::Dog::Nodes::TrueLiteral>
      / 
      'true' <::Dog::Nodes::TrueLiteral>
      /
      'YES' <::Dog::Nodes::TrueLiteral>
      /
      'yes' <::Dog::Nodes::TrueLiteral>
    ) 
  end

  rule false
    (
      'FALSE' <::Dog::Nodes::FalseLiteral>
      / 
      'false' <::Dog::Nodes::FalseLiteral>
      / 
      'NO' <::Dog::Nodes::FalseLiteral>
      / 
      'no' <::Dog::Nodes::FalseLiteral>
    ) 
  end

  # ===================
  # = Building Blocks =
  # ===================

  rule digit
    [0-9]
  end

  rule character
    lower / upper / '_'
  end

  rule lower
    [a-z]
  end

  rule upper
    [A-Z]
  end

  rule t
    terminal
  end

  rule terminal
    (";" / comment / "\n" / end_of_file)
  end

  rule comment
    '#' (!"\n" .)* ("\n" / end_of_file)
  end

  rule sn
    space_newline
  end

  rule space_newline
    (" " / "\t" / "\n" / "\r" / comment)+
  end

  rule s
    space
  end

  rule space
    (" " / "\t")+
  end

  rule end_of_file
    !.
  end

end

end

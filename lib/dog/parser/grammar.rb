# Autogenerated from a Treetop grammar. Edits may be lost.


#
# Copyright 2011 by Salman Ahmad (salman@salmanahmad.com).
# All rights reserved.
#
# Permission is granted for use, copying, modification, distribution,
# and distribution of modified versions of this work as long as the
# above copyright notice is included.
#


module Dog
  include Treetop::Runtime

  def root
    @root ||= :program
  end

  def _nt_program
    start_index = index
    if node_cache[:program].has_key?(index)
      cached = node_cache[:program][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_program_statements

    node_cache[:program][start_index] = r0

    r0
  end

  def _nt_program_statements
    start_index = index
    if node_cache[:program_statements].has_key?(index)
      cached = node_cache[:program_statements][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_top_level_statements
    if r1
      r0 = r1
    else
      r2 = _nt_statements
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:program_statements][start_index] = r0

    r0
  end

  module TopLevelStatements0
    def top_level_statement
      elements[0]
    end

    def t
      elements[1]
    end
  end

  def _nt_top_level_statements
    start_index = index
    if node_cache[:top_level_statements].has_key?(index)
      cached = node_cache[:top_level_statements][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      r2 = _nt_top_level_statement
      s1 << r2
      if r2
        r3 = _nt_t
        s1 << r3
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(TopLevelStatements0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:top_level_statements][start_index] = r0

    r0
  end

  def _nt_top_level_statement
    start_index = index
    if node_cache[:top_level_statement].has_key?(index)
      cached = node_cache[:top_level_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_listen
    if r1
      r0 = r1
    else
      r2 = _nt_load
      if r2
        r0 = r2
      else
        r3 = _nt_config
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:top_level_statement][start_index] = r0

    r0
  end

  module Statements0
    def statement
      elements[0]
    end

    def t
      elements[1]
    end
  end

  def _nt_statements
    start_index = index
    if node_cache[:statements].has_key?(index)
      cached = node_cache[:statements][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      r2 = _nt_statement
      s1 << r2
      if r2
        r3 = _nt_t
        s1 << r3
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Statements0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:statements][start_index] = r0

    r0
  end

  module Statement0
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_s
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i3 = index
      r4 = _nt_command
      if r4
        r3 = r4
      else
        r5 = _nt_expression
        if r5
          r3 = r5
        else
          if has_terminal?('', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 0))
            @index += 0
          else
            terminal_parse_failure('')
            r6 = nil
          end
          if r6
            r3 = r6
          else
            @index = i3
            r3 = nil
          end
        end
      end
      s0 << r3
      if r3
        r8 = _nt_s
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Statement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_assignment
    if r1
      r0 = r1
    else
      r2 = _nt_primary
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  def _nt_command
    start_index = index
    if node_cache[:command].has_key?(index)
      cached = node_cache[:command][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_on
    if r1
      r0 = r1
    else
      r2 = _nt_ask
      if r2
        r0 = r2
      else
        r3 = _nt_notify
        if r3
          r0 = r3
        else
          r4 = _nt_compute
          if r4
            r0 = r4
          else
            r5 = _nt_people
            if r5
              r0 = r5
            else
              r6 = _nt_control_structure
              if r6
                r0 = r6
              else
                r7 = _nt_print
                if r7
                  r0 = r7
                else
                  r8 = _nt_inspect
                  if r8
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:command][start_index] = r0

    r0
  end

  module Assignment0
    def lhs
      elements[0]
    end

    def s1
      elements[1]
    end

    def s2
      elements[3]
    end

  end

  module Assignment1
    def lhs
      elements[0]
    end

    def s1
      elements[1]
    end

    def assignment_operator
      elements[2]
    end

    def s2
      elements[3]
    end

    def primary
      elements[4]
    end
  end

  def _nt_assignment
    start_index = index
    if node_cache[:assignment].has_key?(index)
      cached = node_cache[:assignment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_lhs
    s1 << r2
    if r2
      r3 = _nt_s
      s1 << r3
      if r3
        if has_terminal?('=', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r4 = nil
        end
        s1 << r4
        if r4
          r5 = _nt_s
          s1 << r5
          if r5
            i6 = index
            r7 = _nt_ask
            if r7
              r6 = r7
            else
              r8 = _nt_compute
              if r8
                r6 = r8
              else
                r9 = _nt_people
                if r9
                  r6 = r9
                else
                  @index = i6
                  r6 = nil
                end
              end
            end
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Assignment0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i10, s10 = index, []
      r11 = _nt_lhs
      s10 << r11
      if r11
        r12 = _nt_s
        s10 << r12
        if r12
          r13 = _nt_assignment_operator
          s10 << r13
          if r13
            r14 = _nt_s
            s10 << r14
            if r14
              r15 = _nt_primary
              s10 << r15
            end
          end
        end
      end
      if s10.last
        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        r10.extend(Assignment1)
      else
        @index = i10
        r10 = nil
      end
      if r10
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:assignment][start_index] = r0

    r0
  end

  module Primary0
    def primary
      elements[2]
    end

  end

  def _nt_primary
    start_index = index
    if node_cache[:primary].has_key?(index)
      cached = node_cache[:primary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_access
    if r1
      r0 = r1
    else
      r2 = _nt_operation
      if r2
        r0 = r2
      else
        r3 = _nt_literal
        if r3
          r0 = r3
        else
          r4 = _nt_variable
          if r4
            r0 = r4
          else
            i5, s5 = index, []
            if has_terminal?('(', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('(')
              r6 = nil
            end
            s5 << r6
            if r6
              r8 = _nt_s
              if r8
                r7 = r8
              else
                r7 = instantiate_node(SyntaxNode,input, index...index)
              end
              s5 << r7
              if r7
                r9 = _nt_primary
                s5 << r9
                if r9
                  r11 = _nt_s
                  if r11
                    r10 = r11
                  else
                    r10 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s5 << r10
                  if r10
                    if has_terminal?(')', false, index)
                      r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(')')
                      r12 = nil
                    end
                    s5 << r12
                  end
                end
              end
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Primary0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:primary][start_index] = r0

    r0
  end

  module OperationFirst0
    def primary
      elements[2]
    end

  end

  def _nt_operation_first
    start_index = index
    if node_cache[:operation_first].has_key?(index)
      cached = node_cache[:operation_first][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_literal
    if r1
      r0 = r1
    else
      r2 = _nt_variable
      if r2
        r0 = r2
      else
        i3, s3 = index, []
        if has_terminal?('(', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r4 = nil
        end
        s3 << r4
        if r4
          r6 = _nt_s
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r5
          if r5
            r7 = _nt_primary
            s3 << r7
            if r7
              r9 = _nt_s
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s3 << r8
              if r8
                if has_terminal?(')', false, index)
                  r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r10 = nil
                end
                s3 << r10
              end
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(OperationFirst0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r0 = r3
        else
          r11 = _nt_access
          if r11
            r0 = r11
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:operation_first][start_index] = r0

    r0
  end

  module Operation0
    def operation_first
      elements[0]
    end

    def s1
      elements[1]
    end

    def binary_operator
      elements[2]
    end

    def s2
      elements[3]
    end

  end

  module Operation1
    def unary_operator
      elements[0]
    end

    def s
      elements[1]
    end

    def primary
      elements[2]
    end
  end

  def _nt_operation
    start_index = index
    if node_cache[:operation].has_key?(index)
      cached = node_cache[:operation][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_operation_first
    s1 << r2
    if r2
      r3 = _nt_s
      s1 << r3
      if r3
        r4 = _nt_binary_operator
        s1 << r4
        if r4
          r5 = _nt_s
          s1 << r5
          if r5
            i6 = index
            r7 = _nt_operation
            if r7
              r6 = r7
            else
              r8 = _nt_operation_first
              if r8
                r6 = r8
              else
                @index = i6
                r6 = nil
              end
            end
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Operation0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      r10 = _nt_unary_operator
      s9 << r10
      if r10
        r11 = _nt_s
        s9 << r11
        if r11
          r12 = _nt_primary
          s9 << r12
        end
      end
      if s9.last
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        r9.extend(Operation1)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:operation][start_index] = r0

    r0
  end

  module AccessFirst0
    def s1
      elements[1]
    end

    def primary
      elements[2]
    end

    def s2
      elements[3]
    end

  end

  module AccessFirst1
    def s1
      elements[1]
    end

    def operation
      elements[2]
    end

    def s2
      elements[3]
    end

  end

  def _nt_access_first
    start_index = index
    if node_cache[:access_first].has_key?(index)
      cached = node_cache[:access_first][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_literal
    if r1
      r0 = r1
    else
      r2 = _nt_variable
      if r2
        r0 = r2
      else
        i3, s3 = index, []
        if has_terminal?('(', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_s
          s3 << r5
          if r5
            r6 = _nt_primary
            s3 << r6
            if r6
              r7 = _nt_s
              s3 << r7
              if r7
                if has_terminal?(')', false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r8 = nil
                end
                s3 << r8
              end
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(AccessFirst0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r0 = r3
        else
          i9, s9 = index, []
          if has_terminal?('(', false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r10 = nil
          end
          s9 << r10
          if r10
            r11 = _nt_s
            s9 << r11
            if r11
              r12 = _nt_operation
              s9 << r12
              if r12
                r13 = _nt_s
                s9 << r13
                if r13
                  if has_terminal?(')', false, index)
                    r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r14 = nil
                  end
                  s9 << r14
                end
              end
            end
          end
          if s9.last
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            r9.extend(AccessFirst1)
          else
            @index = i9
            r9 = nil
          end
          if r9
            r0 = r9
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:access_first][start_index] = r0

    r0
  end

  module Access0
    def identifier
      elements[1]
    end
  end

  module Access1
    def access_first
      elements[0]
    end

  end

  module Access2
    def access_first
      elements[0]
    end

    def primary
      elements[2]
    end

  end

  module Access3
    def s
      elements[1]
    end

    def identifier
      elements[2]
    end
  end

  module Access4
    def access_first
      elements[0]
    end

  end

  def _nt_access
    start_index = index
    if node_cache[:access].has_key?(index)
      cached = node_cache[:access][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_access_first
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?('.', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_identifier
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Access0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Access1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_access_first
      s7 << r8
      if r8
        if has_terminal?('[ ', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('[ ')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_primary
          s7 << r10
          if r10
            if has_terminal?(']', false, index)
              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r11 = nil
            end
            s7 << r11
          end
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(Access2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        i12, s12 = index, []
        r13 = _nt_access_first
        s12 << r13
        if r13
          s14, i14 = [], index
          loop do
            i15, s15 = index, []
            i16 = index
            if has_terminal?('\'', false, index)
              r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('\'')
              r17 = nil
            end
            if r17
              r16 = r17
            else
              if has_terminal?('\'s', false, index)
                r18 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('\'s')
                r18 = nil
              end
              if r18
                r16 = r18
              else
                @index = i16
                r16 = nil
              end
            end
            s15 << r16
            if r16
              r19 = _nt_s
              s15 << r19
              if r19
                r20 = _nt_identifier
                s15 << r20
              end
            end
            if s15.last
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              r15.extend(Access3)
            else
              @index = i15
              r15 = nil
            end
            if r15
              s14 << r15
            else
              break
            end
          end
          if s14.empty?
            @index = i14
            r14 = nil
          else
            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          end
          s12 << r14
        end
        if s12.last
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
          r12.extend(Access4)
        else
          @index = i12
          r12 = nil
        end
        if r12
          r0 = r12
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:access][start_index] = r0

    r0
  end

  def _nt_lhs
    start_index = index
    if node_cache[:lhs].has_key?(index)
      cached = node_cache[:lhs][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_variable
    if r1
      r0 = r1
    else
      r2 = _nt_access
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:lhs][start_index] = r0

    r0
  end

  def _nt_variable
    start_index = index
    if node_cache[:variable].has_key?(index)
      cached = node_cache[:variable][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_identifier

    node_cache[:variable][start_index] = r0

    r0
  end

  module Identifier0
    def lower
      elements[0]
    end

  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_lower
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        r4 = _nt_lower
        if r4
          r3 = r4
        else
          r5 = _nt_digit
          if r5
            r3 = r5
          else
            if has_terminal?('_', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('_')
              r6 = nil
            end
            if r6
              r3 = r6
            else
              @index = i3
              r3 = nil
            end
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Identifier0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  def _nt_binary_operator
    start_index = index
    if node_cache[:binary_operator].has_key?(index)
      cached = node_cache[:binary_operator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('+', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('+')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('-', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('*', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('*')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('/', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('/')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('%', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('%')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('**', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('**')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('&&', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('&&')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('||', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('||')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?('AND', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
                      @index += 3
                    else
                      terminal_parse_failure('AND')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?('OR', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure('OR')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?('<=', false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure('<=')
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          if has_terminal?('>=', false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure('>=')
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                          else
                            if has_terminal?('<', false, index)
                              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('<')
                              r13 = nil
                            end
                            if r13
                              r0 = r13
                            else
                              if has_terminal?('>', false, index)
                                r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure('>')
                                r14 = nil
                              end
                              if r14
                                r0 = r14
                              else
                                if has_terminal?('==', false, index)
                                  r15 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                  @index += 2
                                else
                                  terminal_parse_failure('==')
                                  r15 = nil
                                end
                                if r15
                                  r0 = r15
                                else
                                  if has_terminal?('=', false, index)
                                    r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                    @index += 1
                                  else
                                    terminal_parse_failure('=')
                                    r16 = nil
                                  end
                                  if r16
                                    r0 = r16
                                  else
                                    if has_terminal?('!=', false, index)
                                      r17 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                      @index += 2
                                    else
                                      terminal_parse_failure('!=')
                                      r17 = nil
                                    end
                                    if r17
                                      r0 = r17
                                    else
                                      if has_terminal?('<<', false, index)
                                        r18 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                        @index += 2
                                      else
                                        terminal_parse_failure('<<')
                                        r18 = nil
                                      end
                                      if r18
                                        r0 = r18
                                      else
                                        if has_terminal?('>>', false, index)
                                          r19 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                          @index += 2
                                        else
                                          terminal_parse_failure('>>')
                                          r19 = nil
                                        end
                                        if r19
                                          r0 = r19
                                        else
                                          @index = i0
                                          r0 = nil
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:binary_operator][start_index] = r0

    r0
  end

  def _nt_unary_operator
    start_index = index
    if node_cache[:unary_operator].has_key?(index)
      cached = node_cache[:unary_operator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('!', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('!')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('NOT', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('NOT')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:unary_operator][start_index] = r0

    r0
  end

  def _nt_assignment_operator
    start_index = index
    if node_cache[:assignment_operator].has_key?(index)
      cached = node_cache[:assignment_operator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('+=', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('+=')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('-=', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('-=')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('*=', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*=')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('/=', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('/=')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('%=', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('%=')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('**=', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure('**=')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('&&=', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure('&&=')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('||=', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('||=')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:assignment_operator][start_index] = r0

    r0
  end

  module Listen0
    def listen_to_clause
      elements[1]
    end

    def listen_for_clause
      elements[2]
    end

    def listen_at_clause
      elements[3]
    end
  end

  def _nt_listen
    start_index = index
    if node_cache[:listen].has_key?(index)
      cached = node_cache[:listen][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('LISTEN', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('LISTEN')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_listen_to_clause
      s0 << r2
      if r2
        r3 = _nt_listen_for_clause
        s0 << r3
        if r3
          r4 = _nt_listen_at_clause
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Listen0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:listen][start_index] = r0

    r0
  end

  module ListenToClause0
    def s1
      elements[0]
    end

    def s2
      elements[2]
    end

  end

  def _nt_listen_to_clause
    start_index = index
    if node_cache[:listen_to_clause].has_key?(index)
      cached = node_cache[:listen_to_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_s
    s0 << r1
    if r1
      if has_terminal?('TO', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('TO')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_s
        s0 << r3
        if r3
          i4 = index
          r5 = _nt_people
          if r5
            r4 = r5
          else
            r6 = _nt_variable
            if r6
              r4 = r6
            else
              @index = i4
              r4 = nil
            end
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ListenToClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:listen_to_clause][start_index] = r0

    r0
  end

  module ListenForClause0
    def s1
      elements[0]
    end

    def s2
      elements[2]
    end

    def identifier
      elements[3]
    end
  end

  def _nt_listen_for_clause
    start_index = index
    if node_cache[:listen_for_clause].has_key?(index)
      cached = node_cache[:listen_for_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_s
    s0 << r1
    if r1
      if has_terminal?('FOR', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('FOR')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_s
        s0 << r3
        if r3
          r4 = _nt_identifier
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ListenForClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:listen_for_clause][start_index] = r0

    r0
  end

  module ListenAtClause0
    def s1
      elements[0]
    end

    def s2
      elements[2]
    end

    def string
      elements[3]
    end
  end

  def _nt_listen_at_clause
    start_index = index
    if node_cache[:listen_at_clause].has_key?(index)
      cached = node_cache[:listen_at_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_s
    s0 << r1
    if r1
      if has_terminal?('AT', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('AT')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_s
        s0 << r3
        if r3
          r4 = _nt_string
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ListenAtClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:listen_at_clause][start_index] = r0

    r0
  end

  module Ask0
    def integer
      elements[0]
    end

    def sn
      elements[1]
    end
  end

  module Ask1
    def sn1
      elements[1]
    end

    def sn2
      elements[5]
    end

    def sn3
      elements[7]
    end

    def ask_function
      elements[8]
    end

  end

  def _nt_ask
    start_index = index
    if node_cache[:ask].has_key?(index)
      cached = node_cache[:ask][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ASK', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('ASK')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_sn
      s0 << r2
      if r2
        i4, s4 = index, []
        r5 = _nt_integer
        s4 << r5
        if r5
          r6 = _nt_sn
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Ask0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          i7 = index
          r8 = _nt_people
          if r8
            r7 = r8
          else
            r9 = _nt_variable
            if r9
              r7 = r9
            else
              @index = i7
              r7 = nil
            end
          end
          s0 << r7
          if r7
            r11 = _nt_via_clause
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r10
            if r10
              r12 = _nt_sn
              s0 << r12
              if r12
                if has_terminal?('TO', false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('TO')
                  r13 = nil
                end
                s0 << r13
                if r13
                  r14 = _nt_sn
                  s0 << r14
                  if r14
                    r15 = _nt_ask_function
                    s0 << r15
                    if r15
                      r17 = _nt_on_clause
                      if r17
                        r16 = r17
                      else
                        r16 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r16
                      if r16
                        r19 = _nt_using_clause
                        if r19
                          r18 = r19
                        else
                          r18 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r18
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Ask1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ask][start_index] = r0

    r0
  end

  def _nt_ask_function
    start_index = index
    if node_cache[:ask_function].has_key?(index)
      cached = node_cache[:ask_function][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_identifier
    if r1
      r0 = r1
    else
      r2 = _nt_string
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:ask_function][start_index] = r0

    r0
  end

  module Notify0
    def s
      elements[1]
    end

    def notify_of_clause
      elements[4]
    end

  end

  def _nt_notify
    start_index = index
    if node_cache[:notify].has_key?(index)
      cached = node_cache[:notify][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('NOTIFY', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('NOTIFY')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_s
      s0 << r2
      if r2
        i3 = index
        r4 = _nt_variable
        if r4
          r3 = r4
        else
          r5 = _nt_people
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r7 = _nt_via_clause
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            r8 = _nt_notify_of_clause
            s0 << r8
            if r8
              r10 = _nt_using_clause
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r9
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Notify0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:notify][start_index] = r0

    r0
  end

  module NotifyOfClause0
    def s1
      elements[0]
    end

    def s2
      elements[2]
    end

  end

  def _nt_notify_of_clause
    start_index = index
    if node_cache[:notify_of_clause].has_key?(index)
      cached = node_cache[:notify_of_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_s
    s0 << r1
    if r1
      if has_terminal?('OF', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('OF')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_s
        s0 << r3
        if r3
          i4 = index
          r5 = _nt_variable
          if r5
            r4 = r5
          else
            r6 = _nt_string
            if r6
              r4 = r6
            else
              @index = i4
              r4 = nil
            end
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NotifyOfClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:notify_of_clause][start_index] = r0

    r0
  end

  module Compute0
    def s
      elements[1]
    end

    def identifier
      elements[2]
    end

  end

  def _nt_compute
    start_index = index
    if node_cache[:compute].has_key?(index)
      cached = node_cache[:compute][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('COMPUTE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('COMPUTE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_s
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
        if r3
          r5 = _nt_on_clause
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            r7 = _nt_using_clause
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Compute0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:compute][start_index] = r0

    r0
  end

  module UsingClause0
    def s1
      elements[0]
    end

    def s2
      elements[2]
    end

  end

  def _nt_using_clause
    start_index = index
    if node_cache[:using_clause].has_key?(index)
      cached = node_cache[:using_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_s
    s0 << r1
    if r1
      if has_terminal?('USING', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('USING')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_s
        s0 << r3
        if r3
          i4 = index
          r5 = _nt_parameters
          if r5
            r4 = r5
          else
            r6 = _nt_assignment_list
            if r6
              r4 = r6
            else
              r7 = _nt_variable
              if r7
                r4 = r7
              else
                @index = i4
                r4 = nil
              end
            end
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UsingClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:using_clause][start_index] = r0

    r0
  end

  module OnClause0
    def s
      elements[1]
    end
  end

  module OnClause1
    def s
      elements[0]
    end

    def primary
      elements[2]
    end
  end

  def _nt_on_clause
    start_index = index
    if node_cache[:on_clause].has_key?(index)
      cached = node_cache[:on_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_s
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?('ON', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('ON')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_s
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(OnClause0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r6 = _nt_primary
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(OnClause1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:on_clause][start_index] = r0

    r0
  end

  module ViaClause0
    def s1
      elements[0]
    end

    def s2
      elements[2]
    end

  end

  def _nt_via_clause
    start_index = index
    if node_cache[:via_clause].has_key?(index)
      cached = node_cache[:via_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_s
    s0 << r1
    if r1
      if has_terminal?('VIA', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('VIA')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_s
        s0 << r3
        if r3
          i4 = index
          if has_terminal?('email', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure('email')
            r5 = nil
          end
          if r5
            r4 = r5
          else
            if has_terminal?('im', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('im')
              r6 = nil
            end
            if r6
              r4 = r6
            else
              if has_terminal?('sms', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure('sms')
                r7 = nil
              end
              if r7
                r4 = r7
              else
                @index = i4
                r4 = nil
              end
            end
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ViaClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:via_clause][start_index] = r0

    r0
  end

  module InClause0
    def variable
      elements[0]
    end

    def s1
      elements[1]
    end

    def s2
      elements[3]
    end

    def primary
      elements[4]
    end
  end

  module InClause1
    def s1
      elements[0]
    end

    def s2
      elements[2]
    end
  end

  def _nt_in_clause
    start_index = index
    if node_cache[:in_clause].has_key?(index)
      cached = node_cache[:in_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_s
    s0 << r1
    if r1
      i2 = index
      i3, s3 = index, []
      r4 = _nt_variable
      s3 << r4
      if r4
        r5 = _nt_s
        s3 << r5
        if r5
          if has_terminal?('IN', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('IN')
            r6 = nil
          end
          s3 << r6
          if r6
            r7 = _nt_s
            s3 << r7
            if r7
              r8 = _nt_primary
              s3 << r8
            end
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(InClause0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r9 = _nt_variable
        if r9
          r2 = r9
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
      if r2
        r10 = _nt_s
        s0 << r10
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(InClause1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:in_clause][start_index] = r0

    r0
  end

  def _nt_people
    start_index = index
    if node_cache[:people].has_key?(index)
      cached = node_cache[:people][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_me
    if r1
      r0 = r1
    else
      r2 = _nt_public
      if r2
        r0 = r2
      else
        r3 = _nt_users
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:people][start_index] = r0

    r0
  end

  def _nt_me
    start_index = index
    if node_cache[:me].has_key?(index)
      cached = node_cache[:me][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('ME', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('ME')
      r0 = nil
    end

    node_cache[:me][start_index] = r0

    r0
  end

  def _nt_public
    start_index = index
    if node_cache[:public].has_key?(index)
      cached = node_cache[:public][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('PUBLIC', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('PUBLIC')
      r0 = nil
    end

    node_cache[:public][start_index] = r0

    r0
  end

  module Users0
    def people_from_clause
      elements[1]
    end

  end

  def _nt_users
    start_index = index
    if node_cache[:users].has_key?(index)
      cached = node_cache[:users][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('PEOPLE', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('PEOPLE')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('PERSON', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('PERSON')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_people_from_clause
      s0 << r4
      if r4
        r6 = _nt_people_where_clause
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Users0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:users][start_index] = r0

    r0
  end

  module PeopleFromClause0
    def sn1
      elements[0]
    end

    def sn2
      elements[2]
    end

  end

  def _nt_people_from_clause
    start_index = index
    if node_cache[:people_from_clause].has_key?(index)
      cached = node_cache[:people_from_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_sn
    s0 << r1
    if r1
      if has_terminal?('FROM', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('FROM')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_sn
        s0 << r3
        if r3
          i4 = index
          r5 = _nt_community_list
          if r5
            r4 = r5
          else
            r6 = _nt_primary
            if r6
              r4 = r6
            else
              @index = i4
              r4 = nil
            end
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PeopleFromClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:people_from_clause][start_index] = r0

    r0
  end

  module PeopleWhereClause0
    def sn1
      elements[0]
    end

    def sn2
      elements[2]
    end

    def predicate
      elements[3]
    end
  end

  def _nt_people_where_clause
    start_index = index
    if node_cache[:people_where_clause].has_key?(index)
      cached = node_cache[:people_where_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_sn
    s0 << r1
    if r1
      if has_terminal?('WHERE', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('WHERE')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_sn
        s0 << r3
        if r3
          r4 = _nt_predicate
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PeopleWhereClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:people_where_clause][start_index] = r0

    r0
  end

  module On0
    def in_clause
      elements[1]
    end

    def sn
      elements[3]
    end

    def statements
      elements[4]
    end

  end

  def _nt_on
    start_index = index
    if node_cache[:on].has_key?(index)
      cached = node_cache[:on][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ON', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('ON')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_in_clause
      s0 << r2
      if r2
        if has_terminal?('DO', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('DO')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_sn
          s0 << r4
          if r4
            r5 = _nt_statements
            s0 << r5
            if r5
              r7 = _nt_sn
              if r7
                r6 = r7
              else
                r6 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r6
              if r6
                if has_terminal?('END', false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure('END')
                  r8 = nil
                end
                s0 << r8
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(On0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:on][start_index] = r0

    r0
  end

  module Config0
    def s1
      elements[1]
    end

    def identifier
      elements[2]
    end

    def s2
      elements[3]
    end

    def s3
      elements[5]
    end

    def literal
      elements[6]
    end
  end

  def _nt_config
    start_index = index
    if node_cache[:config].has_key?(index)
      cached = node_cache[:config][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CONFIG', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('CONFIG')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_s
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
        if r3
          r4 = _nt_s
          s0 << r4
          if r4
            if has_terminal?('=', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('=')
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_s
              s0 << r6
              if r6
                r7 = _nt_literal
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Config0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:config][start_index] = r0

    r0
  end

  def _nt_load
    start_index = index
    if node_cache[:load].has_key?(index)
      cached = node_cache[:load][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_require
    if r1
      r0 = r1
    else
      r2 = _nt_import
      if r2
        r0 = r2
      else
        r3 = _nt_template
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:load][start_index] = r0

    r0
  end

  module Require0
    def space
      elements[1]
    end

    def string1
      elements[2]
    end

    def string2
      elements[3]
    end

    def identifier
      elements[5]
    end
  end

  def _nt_require
    start_index = index
    if node_cache[:require].has_key?(index)
      cached = node_cache[:require][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('REQUIRE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('REQUIRE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_string
        s0 << r3
        if r3
          r4 = _nt_string
          s0 << r4
          if r4
            if has_terminal?('AS', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('AS')
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_identifier
              s0 << r6
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Require0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:require][start_index] = r0

    r0
  end

  module Template0
    def space1
      elements[1]
    end

    def string
      elements[2]
    end

    def space2
      elements[3]
    end

    def space3
      elements[5]
    end

    def identifier
      elements[6]
    end
  end

  def _nt_template
    start_index = index
    if node_cache[:template].has_key?(index)
      cached = node_cache[:template][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('TEMPLATE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('TEMPLATE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_string
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            if has_terminal?('AS', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('AS')
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_space
              s0 << r6
              if r6
                r7 = _nt_identifier
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Template0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:template][start_index] = r0

    r0
  end

  module Import0
    def space1
      elements[1]
    end

    def string
      elements[2]
    end

    def space2
      elements[3]
    end

    def space3
      elements[5]
    end

    def identifier
      elements[6]
    end
  end

  def _nt_import
    start_index = index
    if node_cache[:import].has_key?(index)
      cached = node_cache[:import][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('IMPORT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('IMPORT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_string
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            if has_terminal?('AS', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('AS')
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_space
              s0 << r6
              if r6
                r7 = _nt_identifier
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Import0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:import][start_index] = r0

    r0
  end

  module Parameters0
    def space_newline
      elements[1]
    end

    def assignment_list
      elements[2]
    end
  end

  module Parameters1
    def space_newline
      elements[1]
    end

  end

  def _nt_parameters
    start_index = index
    if node_cache[:parameters].has_key?(index)
      cached = node_cache[:parameters][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('PARAMETERS', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
      @index += 10
    else
      terminal_parse_failure('PARAMETERS')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space_newline
      s0 << r2
      if r2
        i4, s4 = index, []
        if has_terminal?('WITH', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('WITH')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_space_newline
          s4 << r6
          if r6
            r7 = _nt_assignment_list
            s4 << r7
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Parameters0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Parameters1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameters][start_index] = r0

    r0
  end

  module Print0
    def space
      elements[1]
    end

    def primary
      elements[2]
    end
  end

  def _nt_print
    start_index = index
    if node_cache[:print].has_key?(index)
      cached = node_cache[:print][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('PRINT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('PRINT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_primary
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Print0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:print][start_index] = r0

    r0
  end

  module Inspect0
    def space
      elements[1]
    end

    def primary
      elements[2]
    end
  end

  def _nt_inspect
    start_index = index
    if node_cache[:inspect].has_key?(index)
      cached = node_cache[:inspect][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('INSPECT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('INSPECT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_primary
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Inspect0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:inspect][start_index] = r0

    r0
  end

  module CommunityList0
    def sn1
      elements[0]
    end

    def sn2
      elements[2]
    end

    def string
      elements[3]
    end
  end

  module CommunityList1
    def string
      elements[0]
    end

  end

  def _nt_community_list
    start_index = index
    if node_cache[:community_list].has_key?(index)
      cached = node_cache[:community_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_string
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_sn
        s3 << r4
        if r4
          if has_terminal?('AND', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('AND')
            r5 = nil
          end
          s3 << r5
          if r5
            r6 = _nt_sn
            s3 << r6
            if r6
              r7 = _nt_string
              s3 << r7
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(CommunityList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CommunityList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:community_list][start_index] = r0

    r0
  end

  module AssignmentList0
    def sn
      elements[1]
    end

    def assignment_list_assignment
      elements[2]
    end
  end

  module AssignmentList1
    def assignment_list_assignment
      elements[0]
    end

    def sn
      elements[1]
    end

  end

  def _nt_assignment_list
    start_index = index
    if node_cache[:assignment_list].has_key?(index)
      cached = node_cache[:assignment_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_assignment_list_assignment
    s0 << r1
    if r1
      r2 = _nt_sn
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          i5 = index
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          if r6
            r5 = r6
          else
            if has_terminal?('AND', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure('AND')
              r7 = nil
            end
            if r7
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          s4 << r5
          if r5
            r8 = _nt_sn
            s4 << r8
            if r8
              r9 = _nt_assignment_list_assignment
              s4 << r9
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(AssignmentList0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AssignmentList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assignment_list][start_index] = r0

    r0
  end

  module AssignmentListAssignment0
    def identifier
      elements[0]
    end

    def s1
      elements[1]
    end

    def s2
      elements[3]
    end

    def primary
      elements[4]
    end
  end

  def _nt_assignment_list_assignment
    start_index = index
    if node_cache[:assignment_list_assignment].has_key?(index)
      cached = node_cache[:assignment_list_assignment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      r2 = _nt_s
      s0 << r2
      if r2
        if has_terminal?('=', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_s
          s0 << r4
          if r4
            r5 = _nt_primary
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AssignmentListAssignment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assignment_list_assignment][start_index] = r0

    r0
  end

  def _nt_control_structure
    start_index = index
    if node_cache[:control_structure].has_key?(index)
      cached = node_cache[:control_structure][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_if
    if r1
      r0 = r1
    else
      r2 = _nt_for
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:control_structure][start_index] = r0

    r0
  end

  module If0
    def s
      elements[0]
    end

  end

  module If1
    def s
      elements[1]
    end

    def primary
      elements[2]
    end

    def sn1
      elements[4]
    end

    def statements
      elements[5]
    end

    def sn2
      elements[6]
    end

  end

  def _nt_if
    start_index = index
    if node_cache[:if].has_key?(index)
      cached = node_cache[:if][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('IF', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('IF')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_s
      s0 << r2
      if r2
        r3 = _nt_primary
        s0 << r3
        if r3
          i5, s5 = index, []
          r6 = _nt_s
          s5 << r6
          if r6
            if has_terminal?('THEN', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('THEN')
              r7 = nil
            end
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(If0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            r8 = _nt_sn
            s0 << r8
            if r8
              r9 = _nt_statements
              s0 << r9
              if r9
                r10 = _nt_sn
                s0 << r10
                if r10
                  if has_terminal?('END', false, index)
                    r11 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('END')
                    r11 = nil
                  end
                  s0 << r11
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(If1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:if][start_index] = r0

    r0
  end

  module For0
    def s
      elements[1]
    end

    def primary
      elements[2]
    end
  end

  module For1
    def s
      elements[1]
    end

    def in_clause
      elements[3]
    end

    def sn
      elements[5]
    end

    def statements
      elements[6]
    end

  end

  def _nt_for
    start_index = index
    if node_cache[:for].has_key?(index)
      cached = node_cache[:for][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('FOR', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('FOR')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_s
      s0 << r2
      if r2
        if has_terminal?('EACH', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('EACH')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_in_clause
          s0 << r4
          if r4
            if has_terminal?('DO', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('DO')
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_sn
              s0 << r6
              if r6
                r7 = _nt_statements
                s0 << r7
                if r7
                  r9 = _nt_sn
                  if r9
                    r8 = r9
                  else
                    r8 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r8
                  if r8
                    i10 = index
                    if has_terminal?('END', false, index)
                      r11 = instantiate_node(SyntaxNode,input, index...(index + 3))
                      @index += 3
                    else
                      terminal_parse_failure('END')
                      r11 = nil
                    end
                    if r11
                      r10 = r11
                    else
                      i12, s12 = index, []
                      if has_terminal?('UNTIL', false, index)
                        r13 = instantiate_node(SyntaxNode,input, index...(index + 5))
                        @index += 5
                      else
                        terminal_parse_failure('UNTIL')
                        r13 = nil
                      end
                      s12 << r13
                      if r13
                        r14 = _nt_s
                        s12 << r14
                        if r14
                          r15 = _nt_primary
                          s12 << r15
                        end
                      end
                      if s12.last
                        r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                        r12.extend(For0)
                      else
                        @index = i12
                        r12 = nil
                      end
                      if r12
                        r10 = r12
                      else
                        @index = i10
                        r10 = nil
                      end
                    end
                    s0 << r10
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(For1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:for][start_index] = r0

    r0
  end

  def _nt_literal
    start_index = index
    if node_cache[:literal].has_key?(index)
      cached = node_cache[:literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_number
    if r1
      r0 = r1
    else
      r2 = _nt_string
      if r2
        r0 = r2
      else
        r3 = _nt_bool
        if r3
          r0 = r3
        else
          r4 = _nt_collection
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:literal][start_index] = r0

    r0
  end

  def _nt_collection
    start_index = index
    if node_cache[:collection].has_key?(index)
      cached = node_cache[:collection][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_array
    if r1
      r0 = r1
    else
      r2 = _nt_hash
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:collection][start_index] = r0

    r0
  end

  module Array0
  end

  def _nt_array
    start_index = index
    if node_cache[:array].has_key?(index)
      cached = node_cache[:array][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_items
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?(']', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Array0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:array][start_index] = r0

    r0
  end

  module Items0
    def primary
      elements[3]
    end
  end

  module Items1
    def primary
      elements[1]
    end

  end

  def _nt_items
    start_index = index
    if node_cache[:items].has_key?(index)
      cached = node_cache[:items][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_sn
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_primary
      s0 << r3
      if r3
        r5 = _nt_sn
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          s6, i6 = [], index
          loop do
            i7, s7 = index, []
            r9 = _nt_sn
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s7 << r8
            if r8
              if has_terminal?(',', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(',')
                r10 = nil
              end
              s7 << r10
              if r10
                r12 = _nt_sn
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s7 << r11
                if r11
                  r13 = _nt_primary
                  s7 << r13
                end
              end
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(Items0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Items1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:items][start_index] = r0

    r0
  end

  module Hash0
  end

  def _nt_hash
    start_index = index
    if node_cache[:hash].has_key?(index)
      cached = node_cache[:hash][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_associations
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('}', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('}')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Hash0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:hash][start_index] = r0

    r0
  end

  module Associations0
    def association
      elements[1]
    end
  end

  module Associations1
    def association
      elements[0]
    end

  end

  def _nt_associations
    start_index = index
    if node_cache[:associations].has_key?(index)
      cached = node_cache[:associations][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_association
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?(',', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_association
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Associations0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Associations1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:associations][start_index] = r0

    r0
  end

  module Association0
    def space_newline1
      elements[0]
    end

    def string
      elements[1]
    end

    def space
      elements[2]
    end

    def primary
      elements[4]
    end

    def space_newline2
      elements[5]
    end
  end

  def _nt_association
    start_index = index
    if node_cache[:association].has_key?(index)
      cached = node_cache[:association][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_space_newline
    s0 << r1
    if r1
      r2 = _nt_string
      s0 << r2
      if r2
        r3 = _nt_space
        s0 << r3
        if r3
          if has_terminal?(':', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(':')
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_primary
            s0 << r5
            if r5
              r6 = _nt_space_newline
              s0 << r6
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Association0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:association][start_index] = r0

    r0
  end

  def _nt_bool
    start_index = index
    if node_cache[:bool].has_key?(index)
      cached = node_cache[:bool][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_true
    if r1
      r0 = r1
    else
      r2 = _nt_false
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:bool][start_index] = r0

    r0
  end

  module True0
    true
  end

  def _nt_true
    start_index = index
    if node_cache[:true].has_key?(index)
      cached = node_cache[:true][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('TRUE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('TRUE')
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(True0)
    else
      if has_terminal?('true', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('true')
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(True0)
      else
        if has_terminal?('YES', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('YES')
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(True0)
        else
          if has_terminal?('yes', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('yes')
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(True0)
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:true][start_index] = r0

    r0
  end

  module False0
    false
  end

  def _nt_false
    start_index = index
    if node_cache[:false].has_key?(index)
      cached = node_cache[:false][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('FALSE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('FALSE')
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(False0)
    else
      if has_terminal?('false', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('false')
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(False0)
      else
        if has_terminal?('NO', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('NO')
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(False0)
        else
          if has_terminal?('no', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('no')
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(False0)
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:false][start_index] = r0

    r0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_float
    if r1
      r0 = r1
    else
      r2 = _nt_integer
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Integer0
  end

  module Integer1
  end

  module Integer2
    to_i
  end

  def _nt_integer
    start_index = index
    if node_cache[:integer].has_key?(index)
      cached = node_cache[:integer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    if has_terminal?('-', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('-')
      r3 = nil
    end
    s2 << r3
    if r3
      r5 = _nt_s
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Integer0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s6, i6 = [], index
      loop do
        r7 = _nt_digit
        if r7
          s6 << r7
        else
          break
        end
      end
      if s6.empty?
        @index = i6
        r6 = nil
      else
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      end
      s0 << r6
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Integer1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:integer][start_index] = r0

    r0
  end

  module Float0
  end

  module Float1
  end

  module Float2
    to_f
  end

  def _nt_float
    start_index = index
    if node_cache[:float].has_key?(index)
      cached = node_cache[:float][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    if has_terminal?('-', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('-')
      r3 = nil
    end
    s2 << r3
    if r3
      r5 = _nt_s
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Float0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s6, i6 = [], index
      loop do
        r7 = _nt_digit
        if r7
          s6 << r7
        else
          break
        end
      end
      if s6.empty?
        @index = i6
        r6 = nil
      else
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      end
      s0 << r6
      if r6
        if has_terminal?('.', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r8 = nil
        end
        s0 << r8
        if r8
          s9, i9 = [], index
          loop do
            r10 = _nt_digit
            if r10
              s9 << r10
            else
              break
            end
          end
          if s9.empty?
            @index = i9
            r9 = nil
          else
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          end
          s0 << r9
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Float1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:float][start_index] = r0

    r0
  end

  module String0
  end

  module String1
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        i5 = index
        if has_terminal?('"', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r6 = nil
        end
        if r6
          r5 = nil
        else
          @index = i5
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(String0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?('\"', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\"')
            r8 = nil
          end
          if r8
            r3 = r8
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(String1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string][start_index] = r0

    r0
  end

  def _nt_digit
    start_index = index
    if node_cache[:digit].has_key?(index)
      cached = node_cache[:digit][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[0-9]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:digit][start_index] = r0

    r0
  end

  def _nt_character
    start_index = index
    if node_cache[:character].has_key?(index)
      cached = node_cache[:character][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_lower
    if r1
      r0 = r1
    else
      r2 = _nt_upper
      if r2
        r0 = r2
      else
        if has_terminal?('_', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('_')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:character][start_index] = r0

    r0
  end

  def _nt_lower
    start_index = index
    if node_cache[:lower].has_key?(index)
      cached = node_cache[:lower][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-z]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:lower][start_index] = r0

    r0
  end

  def _nt_upper
    start_index = index
    if node_cache[:upper].has_key?(index)
      cached = node_cache[:upper][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[A-Z]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:upper][start_index] = r0

    r0
  end

  def _nt_t
    start_index = index
    if node_cache[:t].has_key?(index)
      cached = node_cache[:t][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_terminal

    node_cache[:t][start_index] = r0

    r0
  end

  def _nt_terminal
    start_index = index
    if node_cache[:terminal].has_key?(index)
      cached = node_cache[:terminal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(";", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(";")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("\n", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        r3 = _nt_end_of_file
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:terminal][start_index] = r0

    r0
  end

  def _nt_sn
    start_index = index
    if node_cache[:sn].has_key?(index)
      cached = node_cache[:sn][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_space_newline

    node_cache[:sn][start_index] = r0

    r0
  end

  def _nt_space_newline
    start_index = index
    if node_cache[:space_newline].has_key?(index)
      cached = node_cache[:space_newline][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t\\n\\r]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space_newline][start_index] = r0

    r0
  end

  def _nt_s
    start_index = index
    if node_cache[:s].has_key?(index)
      cached = node_cache[:s][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_space

    node_cache[:s][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_end_of_file
    start_index = index
    if node_cache[:end_of_file].has_key?(index)
      cached = node_cache[:end_of_file][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if index < input_length
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("any character")
      r1 = nil
    end
    if r1
      r0 = nil
    else
      @index = i0
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:end_of_file][start_index] = r0

    r0
  end

end

class DogParser < Treetop::Runtime::CompiledParser
  include Dog
end

